// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  parentId    String?  @db.VarChar(191)
  parent      Category? @relation("CategoryToParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToParent")
  products    ProductCategory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Collection {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  products  ProductCollection[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  subtitle     String?
  description  String?
  gender       String   // "hombre" | "mujer" | "unisex"
  material     String?  // normal, becerro, avestruz, cocodrilo, etc.
  height       String?  // bota, bota-alta, bot√≠n, etc.
  sku          String   @unique
  status       String   @default("published")
  categories   ProductCategory[]
  collections  ProductCollection[]
  variants     Variant[]
  images       Image[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Variant {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  option1    String? // talla
  option2    String? // color
  priceMXN   Int     // en centavos
  compareAtMXN Int?  // en centavos
  stock      Int     @default(0)
  sku        String  @unique
  orderItems OrderItem[]
}

model Image {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  url        String
  alt        String
  position   Int     @default(0)
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  @@id([productId, categoryId])
}

model ProductCollection {
  productId   String
  collectionId String
  product     Product    @relation(fields: [productId], references: [id])
  collection  Collection @relation(fields: [collectionId], references: [id])
  @@id([productId, collectionId])
}

model Customer {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  phone      String?
  passwordHash String?
  addresses  Address[]
  orders     Order[]
  createdAt  DateTime @default(now())
}

model Address {
  id         String  @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String   @default("MX")
  isDefault  Boolean  @default(false)
}

model Order {
  id          String   @id @default(cuid())
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  subtotalMXN Int
  shippingMXN Int
  taxMXN      Int
  totalMXN    Int
  status      String   @default("created")
  items       OrderItem[]
  provider    String   // stripe | mercadopago
  providerId  String?  // id de pago
  createdAt   DateTime @default(now())
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  variantId  String
  variant    Variant @relation(fields: [variantId], references: [id])
  title      String
  option1    String?
  option2    String?
  unitPriceMXN Int
  qty        Int
}
